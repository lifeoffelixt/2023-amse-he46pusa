---
title: 'Does Weather has an significant impact on the number of highway traffic accidents?'
author: 'Felix BÃ¼ppelmann'
date: '2023-06-16'
format:
  beamer: 
    aspectratio: 169
    navigation: horizontal
execute:
  echo: false
jupyter: samse_3.11
---

## Summary

Analysis of weather events on German highways and accidents in 2018-19.

## Rationale

It analyses whether highway segments that are particularly exposed to extreme weather events result in more car crashes than usual. 

## Datasources

### Highway Weather Data
* Metadata: [URL](https://mobilithek.info/offers/-3534538293975156153)
* Data: [URL](https://www.mcloud.de/downloads/mcloud/96EA9CD1-0695-4461-90B1-BC6F6B0E0729/>Resultat_HotSpot_Analyse_neu.csv)
* Data Type: CSV
* Description: Weather events on specific routes were studied using reanalysis data from all of Germany from Dec. 1, 2017-Nov. 30, 2019. The weather values of 3160 points with 1 km distance were read from the data and averaged or summed up, depending on the parameter. The values were normalized and the highest was given the value 100, the lowest the value 0.

### CrashData 
* Metadata: [URL](https://www.opengeodata.nrw.de/produkte/transport_verkehr/unfallatlas/)
* Data: [2017](https://www.opengeodata.nrw.de/produkte/transport_verkehr/unfallatlas/Unfallorte2017_EPSG25832_CSV.zip) [2018](https://www.opengeodata.nrw.de/produkte/transport_verkehr/unfallatlas/Unfallorte2018_EPSG25832_CSV.zip) [2019](https://www.opengeodata.nrw.de/produkte/transport_verkehr/unfallatlas/Unfallorte2019_EPSG25832_CSV.zip)
* Data Type: ZIP/CSV
* Description: Road traffic accident data of 2017 to 2019 of Germany.

```{python}
#| context: setup
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import os
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor

data = pd.read_sql_table('weatherCrashData', 'sqlite:///final_report_data.sqlite')
data_per_route = pd.read_sql_table('weatherCrashDataNormalized', 'sqlite:///final_report_data.sqlite')
data_per_route.rename(columns={'SmoothedCrash': 'Crash'}, inplace=True)

def locationMap(df, color, title, zoom=4):
  fig = px.scatter_mapbox(df, lat='Latitude', 
  lon='Longitude', 
  color=color,  
  size_max=8,
  zoom=zoom,
  height=500,
  hover_data={'Latitude': False, 'Longitude': False, 'Strecke': True, 'Kilometer': True},
  center={'lat': df['Latitude'].mean(), 'lon': df['Longitude'].mean()})
  fig.update_layout(mapbox_style='outdoors', mapbox_accesstoken='pk.eyJ1IjoibGlmZW9mZmVsaXh0IiwiYSI6ImNsaXQ2aHB6ZzBsc2ozcW96MjdvZmc3azIifQ.N5nMWySGLLJcjh0Ha1e9CA')
  fig.update_layout(title_text=title, title_x=0.5)
  return fig

def densityMap(df, z, title, zoom=4):
  fig = px.density_mapbox(df, lat='Latitude', 
  lon='Longitude',  
  z=z, 
  radius=3,
  zoom=zoom,
  height=500,
  hover_data={'Latitude': False, 'Longitude': False, 'Strecke': True, 'Kilometer': True},
  center={'lat': df['Latitude'].mean(), 'lon': df['Longitude'].mean()},
  template='seaborn')
  fig.update_layout(mapbox_style='outdoors', mapbox_accesstoken='pk.eyJ1IjoibGlmZW9mZmVsaXh0IiwiYSI6ImNsaXQ2aHB6ZzBsc2ozcW96MjdvZmc3azIifQ.N5nMWySGLLJcjh0Ha1e9CA')
  fig.update_layout(title_text=title, title_x=0.5)
  return fig

def correlationPlot(df, columns_to_exclude, title):
  # Select only the columns of interest
  selected_columns = [col for col in df.columns if col not in columns_to_exclude]

  # Calculate the correlation matrix
  corr_matrix = df[selected_columns].corr()

  # Plot the correlation matrix
  plt.figure(figsize=(10, 8))
  sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
  plt.title(title)
  return plt, corr_matrix

def linePlot(df, x, y, title, x_title, y_title):
  fig = px.line(df, x=x, y=y, title=title, template='seaborn')
  fig.update_layout(xaxis_title=x_title, yaxis_title=y_title)
  fig.update_layout(legend=dict(
    title=''
))
  return fig

if not os.path.exists('images'):
    os.mkdir('images')

def save_image(fig, name):
  location = os.path.join('images', name)
  if not os.path.exists(location):
    fig.write_image(location)
```

## Transformations

1. Preporcessing of the weather data
    * Give each weather measure point a unique ID
    * As the measure points are distributed one kilometer apart from each other, each points gets an kilomter marker
2. Preprocessing of the crash data
    * Dropping rows with irrelevant data (turn accidents, bike accidents, etc.)
    * Drop columns with irrelevant data
3. Connect the crash data with the weather data
    * For each crash, find the closest weather measure point (Treshold: 600m)
      + Drop rows where no point is within the treshold
      + If there are multiple points within the treshold, select the one closest
    * Merge crash data to the weather data
4. Normalize the combined data per Route

## Analysis of all routes combined



![Map of all the routes](images/Strecke.png){width='80%'}

## Crashes of all routes

![Map of all the crashes](images/Crash.png){width='80%'}

## Weather of all routes
![Map of all the crashes](images/Weather.png){width='80%'}


 

## Correlation Analysis
```{python}
# List of columns to exclude from correlation calculation
columns_to_exclude = ['index','Strecke', 'StreckeID', 'Kilometer', 'Count', 'CrashCount', 'CrashCountWet', 'CrashCountSnow', 'CrashCountWetSnow','Latitude', 'Longitude', 'NormalizedCrashWet', 'NormalizedCrashSnow', 'NormalizedCrashWetSnow']  # Add the column names you want to exclude


plt, corr_matrix = correlationPlot(data, columns_to_exclude, 'Correlation Matrix')
plt.show()
```



```{python}
# Find the column(s) with the highest correlation coefficient(s)
highest_corr = corr_matrix['NormalizedCrash'].abs().nlargest(5)  
top_weather_phenomena = highest_corr.index[1:]  
list(top_weather_phenomena)
```


## Feature Importance


```{python}
# List of columns to exclude from correlation calculation
columns_to_exclude = ['index','Strecke', 'StreckeID', 'Kilometer', 'Count', 'CrashCount', 'CrashCountWet', 'CrashCountSnow', 'CrashCountWetSnow','Latitude', 'Longitude', 'NormalizedCrash', 'NormalizedCrashWet', 'NormalizedCrashSnow', 'NormalizedCrashWetSnow']  

# Select only the columns of interest
selected_columns = [col for col in data.columns if col not in columns_to_exclude]


X = data[selected_columns] 
y = data['NormalizedCrash']

# Create a random forest regressor
rf = RandomForestRegressor()

# Train the model
rf.fit(X, y)

# Get feature importances
importances = rf.feature_importances_

# Create a dataframe to store feature importances
feature_importance_df = pd.DataFrame({'Feature': X.columns, 'Importance': importances})
# Sort the feature importances
feature_importance_df = feature_importance_df.sort_values('Importance', ascending=False)

# Plot the feature importances
plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=feature_importance_df)
plt.title('Feature Importances')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.show()
```


## Analysis of crashes during precipitation


![Map of all the crashe in the wet](images/CrashWet.png){width='80%'}

## Precipitation Map

![Map of all the crashe in the wet](images/Precipitation.png){width='80%'}



## Correlation Analysis of wet weather crashes

```{python}
# List of columns to exclude from correlation calculation
columns_to_exclude = ['index','Strecke', 'StreckeID', 'Kilometer', 'Count', 'CrashCount', 'CrashCountWet', 'CrashCountSnow', 'CrashCountWetSnow','Latitude', 'Longitude', 'NormalizedCrash', 'NormalizedCrashSnow', 'NormalizedCrashWetSnow']  # Add the column names you want to exclude

plt, corr_matrix = correlationPlot(data, columns_to_exclude, 'Correlation Matrix of precipitation crashes')
plt.show()
```


```{python}
# Find the column(s) with the highest correlation coefficient(s)
highest_corr = corr_matrix['NormalizedCrashWet'].abs().nlargest(5)  
top_weather_phenomena = highest_corr.index[1:]  
list(top_weather_phenomena)
```

## Analysis of crashes due to snow


![Map of all the crashe in the snow](images/CrashSnow.png){width='80%'}

## Snow Map

![Map of snow](images/Snow.png){width='80%'}


## Correlation Analysis

```{python}
# List of columns to exclude from correlation calculation
columns_to_exclude = ['index','Strecke', 'StreckeID', 'Kilometer', 'Count', 'CrashCount', 'CrashCountWet', 'CrashCountSnow', 'CrashCountWetSnow','Latitude', 'Longitude', 'NormalizedCrash', 'NormalizedCrashWet', 'NormalizedCrashWetSnow']  # Add the column names you want to exclude

plt, corr_matrix = correlationPlot(data, columns_to_exclude, 'Correlation Matrix of snow crashes')
plt.show()
```

## Analysis of one route with relativ high crash occurence (Karlsruhe - Munich)

![Map of all the crashe in the wet](images/CrashKarlsruheMunich.png){width='80%'}

## Weather Map

![Map of all the crashe in the wet](images/WeatherKarlsruheMunich.png){width='80%'}


## Karlsruhe - Munich Correlation Analysis
```{python}
# List of columns to exclude from correlation calculation
columns_to_exclude = ['index','Strecke', 'StreckeID', 'Kilometer', 'Count', 'CrashCount', 'CrashCountWet', 'CrashCountSnow', 'CrashCountWetSnow','Latitude', 'Longitude', 'NormalizedCrashWet', 'NormalizedCrashSnow', 'NormalizedCrashWetSnow', 'Crash', 'SmoothedCrashWet', 'SmoothedCrashSnow', 'SmoothedCrashWetSnow']  # Add the column names you want to exclude


plt, corr_matrix = correlationPlot(data_per_route[data_per_route['Strecke'] == 'Karlsruhe_Muenchen'], columns_to_exclude, 'Correlation Matrix')
plt.show()
```


## Karlruhe to Munich Weather Events and Crashes per Kilometer


![Crash and Weather Events per Kilometer](images/KarlsruheMunichKilometer.png){width='80%'}
```{python}
fig_10 = linePlot(data_per_route[data_per_route['Strecke'] == 'Karlsruhe_Muenchen'], 'Kilometer', ['Crash','Gesamt', 'Niederschlag', 'Gesamtschnee', 'Wind'], 'Crash and Weather Events per Kilometer', 'Kilometer', '')
fig_10.show()
```


## Conclusion
The analysis investigates whether highway segments exposed to extreme weather events lead to more car crashes. Here are the key findings:

1. Initial Analysis:
    * The number of crashes is higher in the south of Germany, where severe weather events also occur more frequently.

2. Correlation Analysis:
    * The correlation between the number of crashes and weather events is not strong.
    * Wind-related events are negatively correlated with crashes, indicating that more wind on the highway is associated with fewer crashes.
    * 'Niederschlag' (precipitation) shows a positive correlation, meaning that more precipitation leads to more crashes.

## Conclusion Part 2
3. Random Forest Regressor:
    * 'Black Ice' and 'WindbÃ¶en' are the most important weather factors for predicting crash likelihood.
    * None of the features stand out significantly in predicting crash likelihood.

4. Analysis of Wet Conditions:
    * Areas with more precipitation tend to have more crashes, but the correlation is not strong.

5. Analysis of Snow Conditions:
    * Areas with more snow tend to have more crashes, but the correlation is not strong.

## Conclusion Part 3
6. Analysis of A8 Route (Karlsruhe - Munich):
    * The A8 route shows a relatively high occurrence of crashes.
    * Contrary to expectations, areas with more severe weather events on this route have fewer crashes.
    * There is a negative correlation between weather events and crashes on this particular route.
    * Weather events may not be the primary cause of crashes on the A8 route.

## Summary
In summary, the analysis does not strongly support the hypothesis that highway segments exposed to extreme weather events result in more car crashes. The correlation analysis and specific route analysis suggest that weather events may not be the main contributing factor to the observed crashes.